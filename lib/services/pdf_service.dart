import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';
import 'storage_service.dart';

class PdfService {
  // Define your brand color here (edit if needed)
  static const PdfColor brandColor = PdfColor.fromInt(0xFF3B82F6); // Tailwind Blue-500

  // ✅ Instance method for compatibility with existing screens
  Future<void> generateAndDownload(String title, Map<String, String> fields) async {
    await PdfService.generateSingleCalculatorPdf(title, fields);
  }

  // ✅ Single Calculator PDF
  static Future<void> generateSingleCalculatorPdf(
      String title, Map<String, String> fields) async {
    final pdf = pw.Document();

    final now = DateTime.now();
    final formattedDate =
        "${now.day}/${now.month}/${now.year} ${now.hour}:${now.minute.toString().padLeft(2, '0')}";

    pdf.addPage(
      pw.Page(
        build: (pw.Context context) => pw.Container(
          color: PdfColors.white,
          padding: const pw.EdgeInsets.all(24),
          child: pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              // Header Bar
              pw.Container(
                width: double.infinity,
                padding: const pw.EdgeInsets.all(12),
                color: brandColor,
                child: pw.Text(
                  title,
                  style: pw.TextStyle(
                    fontSize: 22,
                    fontWeight: pw.FontWeight.bold,
                    color: PdfColors.white,
                  ),
                ),
              ),
              pw.SizedBox(height: 12),
              pw.Text("Generated on: $formattedDate",
                  style: pw.TextStyle(fontSize: 12, color: PdfColors.grey700)),
              pw.SizedBox(height: 10),
              pw.Divider(color: brandColor, thickness: 1.2),
              pw.SizedBox(height: 16),

              // Data Fields
              ...fields.entries.map(
                (e) => pw.Padding(
                  padding: const pw.EdgeInsets.only(bottom: 6),
                  child: pw.Row(
                    crossAxisAlignment: pw.CrossAxisAlignment.start,
                    children: [
                      pw.Text(
                        "${e.key}: ",
                        style: pw.TextStyle(
                            fontWeight: pw.FontWeight.bold, color: brandColor),
                      ),
                      pw.Expanded(child: pw.Text("${e.value}")),
                    ],
                  ),
                ),
              ),

              pw.SizedBox(height: 24),
              pw.Divider(color: PdfColors.grey400),

              // Footer Branding
              pw.Align(
                alignment: pw.Alignment.center,
                child: pw.Text(
                  "Generated by Marketing Calculators © ${now.year}",
                  style: pw.TextStyle(
                    fontSize: 10,
                    color: PdfColors.grey600,
                    fontStyle: pw.FontStyle.italic,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );

    final bytes = await pdf.save();
    await Printing.sharePdf(bytes: bytes, filename: '$title.pdf');
  }

  // ✅ Merge All Saved Calculations to Single PDF
  static Future<void> mergeAllToPdfAndShare() async {
    final all = await StorageService.getAllSavedCalculations();
    final pdf = pw.Document();

    final now = DateTime.now();
    final formattedDate =
        "${now.day}/${now.month}/${now.year} ${now.hour}:${now.minute.toString().padLeft(2, '0')}";

    for (final entry in all) {
      pdf.addPage(
        pw.Page(
          build: (pw.Context context) => pw.Container(
            padding: const pw.EdgeInsets.all(24),
            color: PdfColors.white,
            child: pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                pw.Container(
                  width: double.infinity,
                  padding: const pw.EdgeInsets.all(10),
                  color: brandColor,
                  child: pw.Text(
                    entry['title'] ?? 'Calculator',
                    style: pw.TextStyle(
                      fontSize: 20,
                      fontWeight: pw.FontWeight.bold,
                      color: PdfColors.white,
                    ),
                  ),
                ),
                pw.SizedBox(height: 10),
                pw.Text("Generated on: $formattedDate",
                    style:
                        pw.TextStyle(fontSize: 11, color: PdfColors.grey700)),
                pw.SizedBox(height: 10),
                pw.Divider(color: brandColor, thickness: 1.2),
                pw.SizedBox(height: 10),

                ...((entry['data'] as Map<String, dynamic>).entries.map(
                  (e) => pw.Padding(
                    padding: const pw.EdgeInsets.only(bottom: 4),
                    child: pw.Row(
                      crossAxisAlignment: pw.CrossAxisAlignment.start,
                      children: [
                        pw.Text(
                          "${e.key}: ",
                          style: pw.TextStyle(
                              fontWeight: pw.FontWeight.bold,
                              color: brandColor),
                        ),
                        pw.Expanded(child: pw.Text("${e.value}")),
                      ],
                    ),
                  ),
                )),

                pw.SizedBox(height: 20),
                pw.Divider(color: PdfColors.grey400),

                pw.Align(
                  alignment: pw.Alignment.center,
                  child: pw.Text(
                    "Generated by Marketing Calculators © ${now.year}",
                    style: pw.TextStyle(
                      fontSize: 10,
                      color: PdfColors.grey600,
                      fontStyle: pw.FontStyle.italic,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      );
    }

    final bytes = await pdf.save();
    await Printing.sharePdf(
      bytes: bytes,
      filename: 'All_Calculators_${DateTime.now().toIso8601String()}.pdf',
    );
  }
}
